Vagrant::Config.run do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "base64"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "http://files.vagrantup.com/lucid64.box"

  # Boot with a GUI so you can see the screen. (Default is headless)
  # config.vm.boot_mode = :gui

  # Share an additional folder to the guest VM. The first argument is
  # an identifier, the second is the path on the guest to mount the
  # folder, and the third is the path on the host to the actual folder.
  # config.vm.share_folder "v-data", "/vagrant_data", "../data"

  # Make our code available to the VM.
  config.vm.share_folder("source", "/workspace", "../..")

  # Enable provisioning with chef solo, specifying a cookbooks path (relative
  # to this Vagrantfile), and adding some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "cookbooks"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end
  config.vm.define :es_server do |es_server|
    es_server.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = ["../cookbooks", "../site-cookbooks"]
      chef.roles_path = "../roles"
      chef.add_recipe("apt")
      chef.add_recipe("git")
      chef.add_role("es-server")

      # Temporary addition of required cookbooks for EC2, since
      # recipes used by roles are not automatically calculated:
      #
      chef.add_recipe("java")
      chef.add_recipe("misc")

      #this prints out the vagrant config to a `dna.json` file that we
      #can upload to an EC2 instance and use with `chef-solo`.
      require 'json'
      Dir::mkdir('es_server') if not File::directory?('es_server')
      open('es_server/dna.json', 'w') do |f|
        chef.json[:run_list] = chef.run_list
        f.write chef.json.to_json
      end
      open('es_server/cookbooks_path.json', 'w') do |f|
        f.puts JSON.generate([chef.cookbooks_path].flatten)
      end
      open('es_server/roles_path.json', 'w') do |f|
        f.puts JSON.generate([chef.roles_path].flatten)
      end
    end
	es_server.vm.customize do |vm|
	  vm.name = "ElasticSearch server"
	  vm.memory_size = 2048
	  vm.cpu_count = 2
	end
    es_server.vm.network("33.33.33.12")
    es_server.vm.forward_port("ES", 9200, 9200)
  end

  config.vm.define :solr_server do |solr_server|
    solr_server.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = ["../cookbooks", "../site-cookbooks"]
      chef.roles_path = "../roles"
      chef.add_recipe("apt")
      chef.add_recipe("git")
      chef.add_role("solr-server")

      # Temporary addition of required cookbooks for EC2, since
      # recipes used by roles are not automatically calculated:
      #
      chef.add_recipe("java")
      chef.add_recipe("misc")

      #this prints out the vagrant config to a `dna.json` file that we
      #can upload to an EC2 instance and use with `chef-solo`.
      require 'json'
      Dir::mkdir('solr_server') if not File::directory?('solr_server')
      open('solr_server/dna.json', 'w') do |f|
        chef.json[:run_list] = chef.run_list
        f.write chef.json.to_json
      end
      open('solr_server/cookbooks_path.json', 'w') do |f|
        f.puts JSON.generate([chef.cookbooks_path].flatten)
      end
      open('solr_server/roles_path.json', 'w') do |f|
        f.puts JSON.generate([chef.roles_path].flatten)
      end
    end
	solr_server.vm.customize do |vm|
	  vm.name = "Solr server"
	  vm.memory_size = 2048
	  vm.cpu_count = 2
	end
    solr_server.vm.network("33.33.33.13")
    solr_server.vm.forward_port("Solr", 8983, 8983)
  end

  config.vm.define :data_server do |s|
    s.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = ["../cookbooks", "../site-cookbooks"]
      chef.roles_path = "../roles"
      chef.add_recipe("apt")
      chef.add_recipe("git")
      chef.add_role("data-server")

      # Temporary addition of required cookbooks for EC2, since
      # recipes used by roles are not automatically calculated:
      #
      chef.add_recipe("java")
      chef.add_recipe("python")
      chef.add_recipe("misc")

      #this prints out the vagrant config to a `dna.json` file that we
      #can upload to an EC2 instance and use with `chef-solo`.
      require 'json'
      Dir::mkdir('data_server') if not File::directory?('data_server')
      open('data_server/dna.json', 'w') do |f|
        chef.json[:run_list] = chef.run_list
        f.write chef.json.to_json
      end
      open('data_server/cookbooks_path.json', 'w') do |f|
        f.puts JSON.generate([chef.cookbooks_path].flatten)
      end
      open('data_server/roles_path.json', 'w') do |f|
        f.puts JSON.generate([chef.roles_path].flatten)
      end
    end
	s.vm.customize do |vm|
	  vm.name = "Data server"
	  vm.memory_size = 2048
	  vm.cpu_count = 2
	end
    s.vm.network("33.33.33.14")
    s.vm.forward_port("django_test", 8000, 8000)
    s.vm.forward_port("Solr", 8983, 8983)
    s.vm.forward_port("ES", 9200, 9200)

    # Mimic the 'data-api' recipe:
    #
    s.vm.share_folder("source", "/opt/workspace", "../../")
  end

  config.vm.define :hadoop_client do |hadoop_client_config|
    # Make our data available to the VM.
    hadoop_client_config.vm.share_folder("documents", "/documents", "~/Documents")

    hadoop_client_config.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = ["../cookbooks", "../site-cookbooks"]
      chef.roles_path = "../roles"
      chef.add_recipe("apt")
      chef.add_recipe("git")
      chef.add_role("hadoop-client")

      chef.json.merge!({
        :s3cmd => {
          # Use the user's own keys.
          #
          :aws_access_key_id => ENV['AWS_ACCESS_KEY_ID'],
          :aws_secret_access_key => ENV['AWS_SECRET_ACCESS_KEY']
        }
      })

      # Temporary addition of required cookbooks for EC2, since
      # recipes used by roles are not automatically calculated:
      #
      chef.add_recipe("java")
      chef.add_recipe("misc")

      #this prints out the vagrant config to a `dna.json` file that we
      #can upload to an EC2 instance and use with `chef-solo`.
      require 'json'
      Dir::mkdir('hadoop_client') if not File::directory?('hadoop_client')
      open('hadoop_client/dna.json', 'w') do |f|
        chef.json[:run_list] = chef.run_list
        f.write chef.json.to_json
      end
      open('hadoop_client/cookbooks_path.json', 'w') do |f|
        f.puts JSON.generate([chef.cookbooks_path].flatten)
      end
      open('hadoop_client/roles_path.json', 'w') do |f|
        f.puts JSON.generate([chef.roles_path].flatten)
      end
    end
  end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_server do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # IF you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
